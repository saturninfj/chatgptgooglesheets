const API_KEY = 'YOUR-API-KEY';

/**
 * 1. GPTRequest - General Q&A or Single-Cell Analysis
 */
function GPTRequest(prompt) {
  return GPTChat(prompt);
}

/**
 * 2. GPTAnalyzeRange - Analyzes a Range of Cells
 */
function GPTAnalyzeRange(range) {
  const text = range.flat().join(' ');
  return GPTChat("Analyze this: " + text);
}

/**
 * onOpen - Adds Custom Menu to Google Sheets
 * This creates a "ChatGPT Tools" menu with a "Generate Table" option.
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('ChatGPT Tools')
    .addItem('Generate Table', 'GPTOutputTableMenu')
    .addToUi();
}

/**
 * GPTOutputTableMenu - Generates a Properly Separated Table and Fills the Cells in Google Sheets
 * Triggered by the "Generate Table" menu option.
 */
function GPTOutputTableMenu() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const startRow = 2;  // Starting row for the table
  const startCol = 2;  // Starting column for the table

  // Step 1: Prompt the user for a question
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt('ChatGPT Table Generator', 'Enter your question or request:', ui.ButtonSet.OK_CANCEL);

  // Exit if the user cancels the prompt
  if (response.getSelectedButton() !== ui.Button.OK) {
    ui.alert('Table generation cancelled.');
    return;
  }

  const question = response.getResponseText();

  // Step 2: Generate the Table Data from ChatGPT
  const prompt = `${question}\n\nPlease format the output as a table with columns separated by tabs, and rows separated by new lines.`;
  const result = GPTChat(prompt);

  // Step 3: Parse the Result into Rows and Columns
  const tableData = result.split('\n').map(row => row.split('\t'));

  // Step 4: Write the Table to Google Sheets
  for (let i = 0; i < tableData.length; i++) {
    for (let j = 0; j < tableData[i].length; j++) {
      const cell = sheet.getRange(startRow + i, startCol + j);
      cell.setValue(tableData[i][j]);

      // Step 5: Format the Table
      if (i === 0) {
        // Format Headers
        cell.setFontWeight('bold');
        cell.setBackground('#f4f4f9');
      }
      cell.setBorder(true, true, true, true, true, true);
      cell.setHorizontalAlignment('center');
      cell.setVerticalAlignment('middle');
    }
  }

  // Step 6: Auto-Resize the Columns
  const numColumns = tableData[0].length;
  for (let k = startCol; k < startCol + numColumns; k++) {
    sheet.autoResizeColumn(k);
  }

  // Notify the user that the table has been generated
  ui.alert('Table generated successfully!');
}


/**
 * GPTAnalyzeDocumentEfficient - Efficiently Analyzes the Entire Google Sheet Document
 * Summarizes each sheet and chunks data if necessary to avoid token limits.
 * Example: =GPTAnalyzeDocumentEfficient("What are the key trends across all sheets?")
 */
function GPTAnalyzeDocumentEfficient(question) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = spreadsheet.getSheets();
  let combinedData = '';
  let dataChunks = [];
  let chunkSize = 2000; // Adjust this value for smaller/larger chunks

  // Step 1: Summarize each sheet's data first
  for (let i = 0; i < sheets.length; i++) {
    const sheet = sheets[i];
    const sheetName = sheet.getName();
    const range = sheet.getDataRange();
    const values = range.getValues();
    let sheetData = '';

    // Combine data from each sheet
    sheetData += `Summary of ${sheetName}:\n`;
    values.forEach(row => {
      sheetData += row.join(' | ') + '\n';
    });

    // Summarize each sheet before adding to combinedData
    const summaryPrompt = `Summarize the following data concisely: \n\n ${sheetData}`;
    const summary = GPTChat(summaryPrompt);

    combinedData += `Summary of ${sheetName}:\n` + summary + '\n';

    // If combinedData is too large, chunk it
    if (combinedData.length > chunkSize) {
      dataChunks.push(combinedData);
      combinedData = '';
    }
  }

  // Push the remaining data as the last chunk
  if (combinedData.length > 0) {
    dataChunks.push(combinedData);
  }

  // Step 2: Analyze each chunk separately
  let results = [];
  for (let j = 0; j < dataChunks.length; j++) {
    const fullPrompt = question + "\n\n" + dataChunks[j];
    const result = GPTChat(fullPrompt, false);
    results.push(result);
  }

  // Step 3: Combine all results and return the final answer
  const finalAnswer = results.join('\n');
  return finalAnswer;
}


/**
 * 3. GPTMultiSheet - Analyzes Multiple Sheets and Ranges, and Posts Result as Table
 */
function GPTMultiSheet(question, ...ranges) {
  let combinedText = '';
  for (let i = 0; i < ranges.length; i++) {
    let range = ranges[i];
    let text = range.flat().join(' ');
    combinedText += `Data from Range ${i+1}: ` + text + '\n';
  }
  const fullPrompt = question + "\n\n" + combinedText;
  return GPTChat(fullPrompt, true);
}

/**
 * 4. GPTCompareSheets - Compares Data Between Two Sheets or Ranges
 */
function GPTCompareSheets(question, range1, range2) {
  const text1 = range1.flat().join(' ');
  const text2 = range2.flat().join(' ');
  const fullPrompt = question + "\n\nData Set 1: " + text1 + "\n\nData Set 2: " + text2;
  return GPTChat(fullPrompt, true);
}

/**
 * 5. GPTFillTable - Automatically Fills or Completes a Data Table
 */
function GPTFillTable(question, range) {
  const text = range.flat().join(' ');
  const fullPrompt = question + "\n\n" + text;
  return GPTChat(fullPrompt, true);
}

/**
 * 6. GPTFinancialProjection - Performs Financial Calculations and Projections
 */
function GPTFinancialProjection(question, ...ranges) {
  let combinedText = '';
  for (let i = 0; i < ranges.length; i++) {
    let range = ranges[i];
    let text = range.flat().join(' ');
    combinedText += `Data from Range ${i+1}: ` + text + '\n';
  }
  const fullPrompt = question + "\n\n" + combinedText;
  return GPTChat(fullPrompt, true);
}

/**
 * 7. GPTDataSummary - Summarizes Large Datasets into Key Insights
 */
function GPTDataSummary(question, range) {
  const text = range.flat().join(' ');
  const fullPrompt = question + "\n\n" + text;
  return GPTChat(fullPrompt);
}

/**
 * 8. GPTDataCleanse - Cleans and Transforms Messy Data
 */
function GPTDataCleanse(question, range) {
  const text = range.flat().join(' ');
  const fullPrompt = question + "\n\n" + text;
  return GPTChat(fullPrompt, true);
}

/**
 * 9. GPTGenerateReport - Automatically Generates Reports or Presentations
 */
function GPTGenerateReport(question, ...ranges) {
  let combinedText = '';
  for (let i = 0; i < ranges.length; i++) {
    let range = ranges[i];
    let text = range.flat().join(' ');
    combinedText += `Data from Range ${i+1}: ` + text + '\n';
  }
  const fullPrompt = question + "\n\n" + combinedText;
  return GPTChat(fullPrompt, true);
}

/**
 * 10. GPTPivotAnalysis - Creates Pivot Tables with Insights and Trends
 */
function GPTPivotAnalysis(question, range) {
  const text = range.flat().join(' ');
  const fullPrompt = question + "\n\n" + text;
  return GPTChat(fullPrompt, true);
}

/**
 * 11. GPTAutomateWorkflow - Automates Repetitive Tasks and Workflows
 */
function GPTAutomateWorkflow(question, ...ranges) {
  let combinedText = '';
  for (let i = 0; i < ranges.length; i++) {
    let range = ranges[i];
    let text = range.flat().join(' ');
    combinedText += `Data from Range ${i+1}: ` + text + '\n';
  }
  const fullPrompt = question + "\n\n" + combinedText;
  return GPTChat(fullPrompt, true);
}

/**
 * Core Function for Sending Requests to ChatGPT
 */
function GPTChat(prompt, returnTable = false) {
  const url = 'https://api.openai.com/v1/chat/completions';
  const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${API_KEY}`,
  };

  const payload = {
    model: 'gpt-3.5-turbo',
    messages: [{ role: 'user', content: prompt }],
    max_tokens: 500,
  };

  const options = {
    method: 'post',
    headers: headers,
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  try {
    const response = UrlFetchApp.fetch(url, options);
    const statusCode = response.getResponseCode();
    const json = JSON.parse(response.getContentText());

    Logger.log('Status Code: ' + statusCode);
    Logger.log('Response: ' + JSON.stringify(json));

    if (statusCode === 200) {
      const result = json.choices[0].message.content;
      return returnTable ? result.split('\n').map(row => row.split('\t')) : result;
    } else {
      return 'Error: ' + json.error.message;
    }
  } catch (error) {
    Logger.log('Error: ' + error);
    return 'Error: ' + error;
  }
}
